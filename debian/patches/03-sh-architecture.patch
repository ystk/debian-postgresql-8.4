--- postgresql-8.4-8.4.1/src/include/storage/s_lock.h	2009-01-02 02:24:01.000000000 +0900
+++ postgresql-head/src/include/storage/s_lock.h	2009-09-29 15:06:45.000000000 +0900
@@ -567,6 +567,35 @@
 
 #endif /* __m32r__ */
 
+#if defined(__sh__)				/* Renesas' SuperH */
+#define HAS_TEST_AND_SET
+
+typedef unsigned char slock_t;
+
+#define TAS(lock) tas(lock)
+
+static __inline__ int
+tas(volatile slock_t *lock)
+{
+	register int _res;
+
+	/*
+	 * This asm is coded as if %0 could be any register, but actually SuperH
+	 * restricts the target of xor-immediate to be R0.  That's handled by
+	 * the "z" constraint on _res.
+	 */
+	__asm__ __volatile__(
+		"	tas.b @%2    \n"
+		"	movt  %0     \n"
+		"	xor   #1,%0  \n"
+:		"=z"(_res), "+m"(*lock)
+:		"r"(lock)
+:		"memory", "t");
+	return _res;
+}
+
+#endif	 /* __sh__ */
+
 
 /* These live in s_lock.c, but only for gcc */
 
